name: "CI/CD Pipeline"
on:
  push:
    branches-ignore:
      - l10n_develop
      - gh-pages
    paths-ignore:
      - '*.md'
      - 'LICENSE'
      - 'monitoring/grafana-dashboard.json'
      - 'screenshots/**'
    tags-ignore:
      - '*'
  pull_request:
    paths-ignore:
      - '*.md'
      - 'LICENSE'
      - 'data/static/i18n/*.json'
      - 'frontend/src/assets/i18n/*.json'
env:
  NODE_DEFAULT_VERSION: 22
  NODE_OPTIONS: "--max_old_space_size=4096"
  CYCLONEDX_NPM_VERSION: '^2.0.0||^3.0.0'
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
jobs:
  sonarqube:
    name: SonarQube
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      
      - name: Use Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: 22
      
      - name: Install application
        run: npm install
      
      - name: Generate coverage reports
        run: |
          npm test
          npm run frisby
      
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            build/reports/coverage/frontend-tests/lcov.info
            build/reports/coverage/server-tests/lcov.info
            build/reports/coverage/api-tests/lcov.info
      
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=santoshgarole5992_juice-shop
            -Dsonar.organization=santoshgarole5992
            -Dsonar.sources=lib,routes,models,config,frontend/src,views,server.ts,app.ts
            -Dsonar.javascript.lcov.reportPaths=build/reports/coverage/frontend-tests/lcov.info,build/reports/coverage/server-tests/lcov.info,build/reports/coverage/api-tests/lcov.info
      
      - name: Archive SonarQube scanner work directory
        if: always()
        run: |
          tar -czf sonarqube-scannerwork.tar.gz .scannerwork || true
      
      - name: Upload SonarQube scanner artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sonarqube-scannerwork
          path: sonarqube-scannerwork.tar.gz
          retention-days: 7

      - name: Export SonarQube Security Hotspots as JSON
        run: |
          curl -u "${{ secrets.SONAR_TOKEN }}:" "https://sonarcloud.io/api/hotspots/search?projectKey=santoshgarole5992_juice-shop" -o security-hotspots.json

      - name: Upload Security Hotspots Report as JSON
        uses: actions/upload-artifact@v4
        with:
          name: security-hotspots
          path: security-hotspots.json
          retention-days: 7

      - name: Export SonarQube Issues (Code Scanning) as JSON
        run: |
          curl -u "${{ secrets.SONAR_TOKEN }}:" "https://sonarcloud.io/api/issues/search?componentKeys=santoshgarole5992_juice-shop&types=VULNERABILITY,BUG,CODE_SMELL" -o code-scanning-issues.json

      - name: Upload Code Scanning Issues Report as JSON
        uses: actions/upload-artifact@v4
        with:
          name: code-scanning-issues
          path: code-scanning-issues.json
          retention-days: 7

      - name: Generate JSON coverage summary as JSON
        run: |
          npx nyc report --reporter=json-summary --report-dir=build/reports/coverage/frontend-tests || true
          npx nyc report --reporter=json-summary --report-dir=build/reports/coverage/server-tests || true
          npx nyc report --reporter=json-summary --report-dir=build/reports/coverage/api-tests || true

      - name: Upload code coverage summary (JSON)
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-json
          path: |
            build/reports/coverage/frontend-tests/coverage-summary.json
            build/reports/coverage/server-tests/coverage-summary.json
            build/reports/coverage/api-tests/coverage-summary.json
          retention-days: 7